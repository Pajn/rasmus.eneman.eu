<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rasmus Eneman]]></title><description><![CDATA[Studying web developer and politically interested]]></description><link>https://rasmus.eneman.eu</link><generator>metalsmith-feed</generator><lastBuildDate>Fri, 19 Feb 2016 16:41:43 GMT</lastBuildDate><atom:link href="https://rasmus.eneman.eu/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Concluding Remarks]]></title><description><![CDATA[<p>The RIA course is coming to an end which means that it’s time to summarize the experience
I’ve had with this course.</p>]]></description><guid isPermaLink="false">Concluding Remarks</guid><pubDate>Fri, 15 Jan 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Fullstack Redux]]></title><description><![CDATA[<p>My deep dive is into Fullstack Redux.
The video is available at <a href="https://youtu.be/L39o46cdCwI">https://youtu.be/L39o46cdCwI</a>.</p>]]></description><guid isPermaLink="false">Fullstack Redux</guid><pubDate>Wed, 13 Jan 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[I don't like classes]]></title><description><![CDATA[<p>I started programming for normal computers using Python and were later introduced to Java.
While I have changed my views massively since that time there is one thing that only
recently have started to change, which is my view on classes. Classes is one of the very few
things I have missed in Javascript from my time with Java.<br>
However, Typescript have taught me a valuable lesson. What I like isn’t classes it’s a place in
the code that I can go to and look at a description of how the objects will look and behave.
I believe that I have made this misconception because of how classes are taught. I bet you
that you were introduced to classes in a very similar way as me, something similar to</p>]]></description><guid isPermaLink="false">I don&apos;t like classes</guid><pubDate>Wed, 16 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Debugging with devtools]]></title><description><![CDATA[<p>There were a couple of complains about debugging in Javascript in the Slack channel. As I think
Javascript has the next best (after Dart, it’s hard to beat the <a href="https://dart-lang.github.io/observatory/get-started.html">Observatory</a>)
debugging tools available I thought that I should make a post about using the debugger in Chrome.</p>]]></description><guid isPermaLink="false">Debugging with devtools</guid><pubDate>Thu, 03 Dec 2015 19:20:00 GMT</pubDate></item><item><title><![CDATA[It's a matter of style]]></title><description><![CDATA[<p>Since I have previously have used React Native I was already familiar with inline CSS and continued on using it with React as I really appreciated it. I think inline styles is a great way to solve reuse and sharing of styles, ES6 have a great module system and with Object.assign or object spread it’s really easy to mixin common styles. It’s also clean and easy to make the styling depend on state and props by using Object.assign or ternary in the render method. So I really liked the inline styles idea that I had learned in React Native, however when I entered the harsh world of the web things started to change.</p>]]></description><guid isPermaLink="false">It&apos;s a matter of style</guid><pubDate>Thu, 03 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Prerender the app shell]]></title><description><![CDATA[<p>I’m continuing my course on examining the performance optimisations that can be done on a React application. This time I have looked at load time. With a client rendered application the browser first have to fetch the HTML, parse it to find out the CSS and Javascript to get, fetch those and then run the Javascript which will render the page. During all of this, the user will look at a white page.
So how can we improve it?</p>]]></description><guid isPermaLink="false">Prerender the app shell</guid><pubDate>Thu, 26 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Performance and React]]></title><description><![CDATA[<p>An old blog post from Paul Lewis, <a href="https://aerotwist.com/blog/react-plus-performance-equals-what/">React + Performace = ?</a> were brought up in the Facebook group <em>Kodapor</em>. In this post Paul describes how he have benchmarked React against vanilla JavaScript and we could sadly see that the performance of React was much worse than its vanilla counterpart.</p>]]></description><guid isPermaLink="false">Performance and React</guid><pubDate>Mon, 23 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Flux vs Redux]]></title><description><![CDATA[<p>As I have used Flux previously and the course required Redux I have spent quite a lot of time comparing them and trying to understand to pros and cons between them. If you don’t stare at terminology or details they are pretty similar. A Redux store is like a Flux dispatcher and a Redux Reducer is like a Flux store. What seams like the biggest difference is that the state is stored in the dispatcher, or store rather than the stores, or reducers. This means that the data is only stored at a single place instead of multiple places.</p>]]></description><guid isPermaLink="false">Flux vs Redux</guid><pubDate>Sat, 21 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Unexpected math problems and code reuse]]></title><description><![CDATA[<p>When I heard the idea behind Jespers project Cetti I got very interested and started to brainstorm ideas together with him which ended up en me creating a PR with a basic dashboard last week. This week I started on a graph or chart widget for that dashboard. I submitted a basic implementation yesterday and intimidate started on an improvement. The improvement were to add smoothing to the line chart so it stopped being so stiff and instead feel much more organic.</p>]]></description><guid isPermaLink="false">Unexpected math problems and code reuse</guid><pubDate>Tue, 17 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[The dark spots in Typescript]]></title><description><![CDATA[<p>While Typescript is growing more and more on me and is starting to compete with my most favourite programming language however there’s a nail in the eye that I would like to get head. Of course there are many problems in all tool which you need to weigh in when comparing them, but this is</p>]]></description><guid isPermaLink="false">The dark spots in Typescript</guid><pubDate>Tue, 10 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Continuous Integration and Deployment to gh-pages]]></title><description><![CDATA[<p>In the RIA course we will publish our application on Github using the gh-pages branch. I doesn’t like to include build artefacts or similar data in my source code repo, partly because it creates ugly and hard to read diffs (And I like to read them when I view the history) but mostly because they create merge conflicts that’s usually a pain to handle. To solve this I decided early on to develop on master and only publish the built version to gh-pages. However I doesn’t like manual labour, the flow of work, commiting, changing branch, building and commiting again doesn’t speak to me so I decided to try to setup Travis to handle the boring parts.</p>]]></description><guid isPermaLink="false">Continuous Integration and Deployment to gh-pages</guid><pubDate>Wed, 04 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hot loading React components with Typescript]]></title><description><![CDATA[<p>For my project I choose to use Webpack as a module loader, this is because I want <a href="https://github.com/gaearon/react-hot-loader">hot loading</a> which means that updated components gets replaced without a complete page refresh. I do also want Typescript for better help from the editor and the ability to statically sanity check the code.</p>]]></description><guid isPermaLink="false">Hot loading React components with Typescript</guid><pubDate>Tue, 03 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[RIA introduction]]></title><description><![CDATA[<p>This is my first blog post in the RIA course at Linnaeus University.</p>]]></description><guid isPermaLink="false">RIA introduction</guid><pubDate>Mon, 02 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Isolates in Dart]]></title><description><![CDATA[<p><a href="https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/dart-isolate.Isolate">Isolates</a> is a way to fire up another instance that is compleatly sepparate from the first except from message passing.</p>]]></description><guid isPermaLink="false">Isolates in Dart</guid><pubDate>Sun, 14 Sep 2014 00:00:00 GMT</pubDate></item><item><title><![CDATA[Dart, some good stuff]]></title><description><![CDATA[<p><a href="https://www.dartlang.org/">Dart</a> is a new language for the web and in runs both on the client and the server, and it’s fantastic!
So what is it that make it so good that one would pick it over a more proven and stable language?</p>]]></description><guid isPermaLink="false">Dart, some good stuff</guid><pubDate>Wed, 25 May 1014 00:00:00 GMT</pubDate></item></channel></rss>